#version 430 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout( local_size_x = 128, local_size_y = 1, local_size_z = 1 ) in;

layout( std430, binding=4 ) buffer Pos
{
    vec3 positions[ ]; // array of positions
};

layout( std430, binding=5 ) buffer oldPos
{
    vec3 oldPositions[ ]; // array of positions
};

layout( std430, binding=6 ) buffer acc
{
    vec3 accelerations[ ]; // array of velocities
};

layout( std430, binding=7 ) buffer con
{
    vec3 constraint[ ]; // array of constraints
//p1 index
//p2 index
//rest distance
};

layout( std430, binding=8 ) buffer mov
{
    vec2 constraintPart2[ ]; // array of contrains part 2
//p1 moveable
//p2 moveable
};

void main()
{
    int N = int(gl_GlobalInvocationID);

     int p1Index = int(constraint[N].x);
     int p2Index = int(constraint[N].y);
     bool p1Moveable = bool(constraintPart2[p1Index]);
     bool p2Moveable = bool(constraintPart2[p2Index]);
     float restDistance = constraint[N].z;

     vec3 p1_position = positions[p1Index].xyz;
     vec3 p1_acceleration = accelerations[p1Index].xyz;
     vec3 p2_position = positions[p2Index].xyz;
     vec3 p2_acceleration = accelerations[p2Index].xyz;
  
}
