#version 450 core
#extension GL_ARB_compute_shader:enable
#extension GL_ARB_shader_storage_buffer_object:enable

layout(location=0)uniform float dt;
layout(local_size_x=512)in;

uniform float time;
uniform int offset;
uniform int computeNumber;
uniform int constraintNumber;
uniform float springConstant;

uniform vec4 constraintUni[];

layout(std430,binding=0)buffer Pos
{
    vec4 positions[];// array of positions + isMoveable
};

layout(std430,binding=1)buffer oldPos
{
    vec4 oldPositions[];// array of positions
};

layout(std430,binding=2)buffer acc
{
    vec4 accelerations[];// array of velocities
};

layout(std430,binding=3)buffer con
{
    vec4 constraint[];// array of constraints
    //p1 index
    //p2 index
    //rest distance
};

void main()
{
    
    int N=int(gl_GlobalInvocationID);
    if(N+offset>constraintNumber*constraint.length())return;
    N+=offset;
    if(N>constraint.length())return;
    
    int p1Index=int(constraint[N].x);
    int p2Index=int(constraint[N].y);
    
    float restDistance=constraint[N].z;
    
    bool p1Moveable=bool(positions[p1Index].w);
    bool p2Moveable=bool(positions[p2Index].w);
    
    vec3 p1_position=positions[p1Index].xyz;
    vec3 p2_position=positions[p2Index].xyz;
    
    vec3 p1_to_p2=normalize(p2_position-p1_position);
    float current_distance=length(p2_position-p1_position);
    
    vec3 correctionVector=p1_to_p2*(1-restDistance/current_distance);
    vec3 correctionVectorHalf=correctionVector*.5f;
    
    float k_prime=1.-pow(1.-springConstant,1./computeNumber);

    
    if(p1Moveable)
    positions[p1Index]+=vec4(k_prime*correctionVectorHalf,0);
    
    if(p2Moveable)
    positions[p2Index]-=vec4(k_prime*correctionVectorHalf,0);
    
}

